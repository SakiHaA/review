spring.datasource.url=jdbc:postgresql://localhost:5432/review_db
spring.datasource.username=saki
spring.datasource.password=
spring.datasource.driver-class-name=org.postgresql.Driver

# 起動するたびにadminエンティティに基づいたテーブルが作成される
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.port=8080
# server.servlet.context-path=/api

# CORS設定
spring.web.cors.allowed-origins=http://localhost:3000
# 許可するHTTPメソッドを指定
# OPTIONS: プリフライトリクエスト用（ブラウザが自動的に送信する事前確認リクエスト）
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# 許可するHTTPヘッダーを指定
# Authorization: 認証トークン用
# Content-Type: リクエストのデータ形式（JSON等）
# Accept: レスポンスで受け取りたいデータ形式
# Origin: リクエスト元のドメイン
# Access-Control-Request-*: CORSの設定確認用
spring.web.cors.allowed-headers=*

# ブラウザに公開するレスポンスヘッダーを指定
# Access-Control-Allow-*: CORS関連の許可情報
# spring.web.cors.exposed-headers=Access-Control-Allow-Origin,Access-Control-Allow-Credentials

# クレデンシャル（Cookie、認証ヘッダー等）の送信を許可
spring.web.cors.allow-credentials=true

# プリフライトリクエストのキャッシュ時間（秒）
# 3600秒 = 1時間
spring.web.cors.max-age=3600

logging.level.com.example.review.security=DEBUG
logging.level.org.springframework.security=DEBUG

jwt.secret=your-secret-key-here
jwt.expiration=86400000  # 24時間（ミリ秒）

# Football API設定に必要な設定
football.api.key=7f901ea9d16a48f7a3ecb095cbd2658b
football.api.base-url=https://api.football-data.org/v4